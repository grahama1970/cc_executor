{
  "task_list_id": "UNIFIED_STRESS_TESTS_20250623",
  "description": "Unified stress test task list combining all test scenarios",
  "endpoint": "/stream",
  "max_retries": 3,
  "categories": {
    "simple": {
      "description": "Basic functionality tests",
      "tasks": [
        {
          "id": "simple_1",
          "name": "daily_standup",
          "natural_language_request": "Help me write my daily standup update. Ask me what I worked on yesterday, what I'm working on today, and if I have any blockers. Then format it nicely for Slack.",
          "command_template": "claude --print \"${METATAGS} ${REQUEST}\" --output-format stream-json --verbose",
          "metatags": "[category:stress_test][task:daily_standup][complexity:simple][type:interactive]",
          "verification": {
            "marker": "STANDUP_${TIMESTAMP}",
            "expected_patterns": [
              "What did you work on",
              "What are you working on",
              "Any blockers"
            ],
            "timeout": 30,
            "stall_timeout": 20,
            "save_output": true
          }
        },
        {
          "id": "simple_2",
          "name": "recipe_finder",
          "natural_language_request": "Find me a recipe for dinner using chicken and rice. I also have tomatoes, onions, and garlic. Make it something I can cook in 30 minutes.",
          "command_template": "claude --print \"${METATAGS} ${REQUEST}\" --output-format stream-json --verbose",
          "metatags": "[category:stress_test][task:recipe_finder][complexity:simple][type:creative]",
          "verification": {
            "marker": "RECIPE_${TIMESTAMP}",
            "expected_patterns": [
              "chicken",
              "rice",
              "30 minutes"
            ],
            "timeout": 30,
            "stall_timeout": 20
          }
        },
        {
          "id": "simple_3",
          "name": "quick_math",
          "natural_language_request": "Calculate these 10 math problems quickly: 15+27, 83-46, 12*9, 144/12, 2^8, sqrt(169), 15% of 200, 3! (factorial), fibonacci(10), prime factors of 60",
          "verification": {
            "marker": "MATH_${TIMESTAMP}",
            "expected_patterns": [
              "42",
              "37",
              "108",
              "256"
            ],
            "timeout": 45,
            "stall_timeout": 15
          },
          "command_template": "claude --print \"${METATAGS} ${REQUEST}\" --output-format stream-json --verbose",
          "metatags": "[category:stress_test][task:simple_3][complexity:simple][type:general]"
        }
      ]
    },
    "parallel": {
      "description": "Parallel execution stress tests",
      "tasks": [
        {
          "id": "parallel_1",
          "name": "ten_functions",
          "natural_language_request": "Generate 10 different Python functions simultaneously: 1) Calculate area of circle, 2) Convert celsius to fahrenheit, 3) Check if number is prime, 4) Reverse a string, 5) Find factorial, 6) Sort a list, 7) Count vowels in string, 8) Generate fibonacci sequence, 9) Check palindrome, 10) Find GCD of two numbers. Show me all the code.",
          "command_template": "claude --print \"${METATAGS} ${REQUEST}\" --output-format stream-json --verbose",
          "metatags": "[category:stress_test][task:ten_functions][complexity:medium][type:code_generation]",
          "verification": {
            "marker": "FUNCTIONS_${TIMESTAMP}",
            "expected_patterns": [
              "def",
              "return",
              "circle",
              "fibonacci"
            ],
            "timeout": 60,
            "stall_timeout": 30
          }
        },
        {
          "id": "parallel_2",
          "name": "twenty_haikus",
          "natural_language_request": "Write 20 different haikus about programming. Each one should be about a different programming concept: variables, loops, functions, classes, debugging, git, APIs, databases, algorithms, data structures, testing, deployment, documentation, code review, pair programming, refactoring, design patterns, security, performance, and open source.",
          "verification": {
            "marker": "HAIKUS_${TIMESTAMP}",
            "expected_patterns": [
              "5-7-5",
              "variable",
              "loop",
              "function"
            ],
            "timeout": 60,
            "stall_timeout": 20
          },
          "command_template": "claude --print \"${METATAGS} ${REQUEST}\" --output-format stream-json --verbose",
          "metatags": "[category:stress_test][task:parallel_2][complexity:medium][type:general]"
        }
      ]
    },
    "model_comparison": {
      "description": "Compare different models via LiteLLM",
      "tasks": [
        {
          "id": "model_1",
          "name": "gpt_vs_claude",
          "natural_language_request": "Use your ~/.claude/commands/unified_llm_call.md command to call model='perplexity/sonar' with query='Explain recursion in programming with a simple example' and output_path='/tmp/litellm_recursion.txt'. Then explain recursion yourself and compare the two explanations.",
          "verification": {
            "marker": "MODEL_COMPARE_${TIMESTAMP}",
            "expected_patterns": [
              "recursion",
              "example",
              "function calls itself"
            ],
            "timeout": 60,
            "stall_timeout": 20
          },
          "command_template": "claude --print \"${METATAGS} ${REQUEST}\" --output-format stream-json --verbose",
          "metatags": "[category:stress_test][task:model_1][complexity:medium][type:general]"
        },
        {
          "id": "model_2",
          "name": "all_models_fibonacci",
          "natural_language_request": "Use your ~/.claude/commands/unified_llm_call.md command to calculate the 20th Fibonacci number. Try multiple models by setting fallback_models=['gpt-3.5-turbo', 'vertex_ai/gemini-1.5-flash', 'perplexity/sonar-medium']. Set model='gpt-4', query='Calculate the 20th Fibonacci number', output_path='/tmp/fibonacci_result.txt'. Then calculate it yourself and compare results.",
          "verification": {
            "marker": "FIBONACCI_${TIMESTAMP}",
            "expected_patterns": [
              "6765",
              "fibonacci",
              "20th"
            ],
            "timeout": 90,
            "stall_timeout": 30,
            "save_output": true
          },
          "command_template": "claude --print \"${METATAGS} ${REQUEST}\" --output-format stream-json --verbose",
          "metatags": "[category:stress_test][task:model_2][complexity:medium][type:general]"
        }
      ]
    },
    "long_running": {
      "description": "Long running and streaming tests",
      "tasks": [
        {
          "id": "long_1",
          "name": "epic_story",
          "natural_language_request": "Write a 5000 word science fiction story about a programmer who discovers their code is sentient. Include dialogue, plot twists, and a surprising ending. Stream the entire story.",
          "verification": {
            "marker": "STORY_${TIMESTAMP}",
            "expected_patterns": [
              "programmer",
              "sentient",
              "code"
            ],
            "timeout": 180,
            "stall_timeout": 60,
            "save_output": true
          },
          "command_template": "claude --print \"${METATAGS} ${REQUEST}\" --output-format stream-json --verbose",
          "metatags": "[category:stress_test][task:long_1][complexity:extreme][type:general]"
        },
        {
          "id": "long_2",
          "name": "comprehensive_guide",
          "natural_language_request": "Create a comprehensive 10,000 word guide on 'Building Production-Ready Python Applications'. Cover architecture, testing, deployment, monitoring, security, performance optimization, and best practices. Include code examples throughout.",
          "verification": {
            "marker": "GUIDE_${TIMESTAMP}",
            "expected_patterns": [
              "Python",
              "testing",
              "deployment",
              "def"
            ],
            "timeout": 300,
            "stall_timeout": 60,
            "save_output": true
          },
          "command_template": "claude --print \"${METATAGS} ${REQUEST}\" --output-format stream-json --verbose",
          "metatags": "[category:stress_test][task:long_2][complexity:extreme][type:general]"
        }
      ]
    },
    "rapid_fire": {
      "description": "Rapid sequential requests",
      "tasks": [
        {
          "id": "rapid_1",
          "name": "hundred_questions",
          "natural_language_request": "Answer these 100 quick yes/no questions as fast as possible: Is Python interpreted? Is Java compiled? Is 2+2=4? Is the sky blue? Is water wet? [... continue with 95 more simple questions about programming, math, and general knowledge]",
          "verification": {
            "marker": "QUESTIONS_${TIMESTAMP}",
            "expected_patterns": [
              "Yes",
              "No",
              "Python",
              "Java"
            ],
            "timeout": 120,
            "stall_timeout": 40,
            "save_output": true
          },
          "command_template": "claude --print \"${METATAGS} ${REQUEST}\" --output-format stream-json --verbose",
          "metatags": "[category:stress_test][task:rapid_1][complexity:simple][type:general]"
        }
      ]
    },
    "complex_orchestration": {
      "description": "Complex multi-step orchestration",
      "tasks": [
        {
          "id": "complex_1",
          "name": "full_stack_app",
          "natural_language_request": "Guide me through building a complete todo app with these steps: 1) Design the database schema, 2) Create a REST API with FastAPI, 3) Build a React frontend, 4) Write unit tests for the API, 5) Create a Dockerfile, 6) Write deployment instructions for AWS. Show all code and explanations for each step.",
          "verification": {
            "marker": "FULLSTACK_${TIMESTAMP}",
            "expected_patterns": [
              "CREATE TABLE",
              "FastAPI",
              "React",
              "Dockerfile"
            ],
            "timeout": 300,
            "stall_timeout": 60,
            "save_output": true
          },
          "command_template": "claude --print \"${METATAGS} ${REQUEST}\" --output-format stream-json --verbose",
          "metatags": "[category:stress_test][task:complex_1][complexity:complex][type:general]"
        },
        {
          "id": "complex_2",
          "name": "code_review_chain",
          "natural_language_request": "Here's a Python function. First analyze it for issues, then refactor it, then write tests for it, then create documentation, and finally optimize its performance. The function is: def process_data(data): result = []; for i in range(len(data)): if data[i] > 0: result.append(data[i] * 2); return result",
          "verification": {
            "marker": "REVIEW_${TIMESTAMP}",
            "expected_patterns": [
              "def test",
              "docstring",
              "list comprehension"
            ],
            "timeout": 120,
            "stall_timeout": 40,
            "save_output": true
          },
          "command_template": "claude --print \"${METATAGS} ${REQUEST}\" --output-format stream-json --verbose",
          "metatags": "[category:stress_test][task:complex_2][complexity:complex][type:general]"
        }
      ]
    },
    "extreme_stress": {
      "description": "Extreme stress tests to find breaking points",
      "tasks": [
        {
          "id": "extreme_1",
          "name": "research_explosion",
          "natural_language_request": "Research these 20 topics simultaneously and create a comparison table: Rust vs Go performance, Python vs JavaScript for ML, React vs Vue vs Angular, AWS vs Azure vs GCP pricing, MongoDB vs PostgreSQL, GraphQL vs REST, Kubernetes vs Docker Swarm, TensorFlow vs PyTorch, Vim vs Emacs, Linux vs Windows for servers, Git vs SVN, Agile vs Waterfall, microservices vs monolith, SQL vs NoSQL, functional vs OOP, static vs dynamic typing, compiled vs interpreted, sync vs async, REST vs gRPC, and tabs vs spaces. Include pros, cons, and use cases for each.",
          "command_template": "claude --print \"${METATAGS} ${REQUEST}\" --output-format stream-json --verbose",
          "metatags": "[category:stress_test][task:research_explosion][complexity:extreme][type:research]",
          "verification": {
            "marker": "RESEARCH_${TIMESTAMP}",
            "expected_patterns": [
              "Rust",
              "Python",
              "comparison",
              "pros",
              "cons"
            ],
            "timeout": 300,
            "stall_timeout": 60,
            "save_output": true
          }
        },
        {
          "id": "extreme_2",
          "name": "infinite_improvement",
          "natural_language_request": "Take this code and improve it 10 times. Each improvement should build on the previous one. Start with: print('hello world'). For each iteration, make it more sophisticated, add features, improve structure, add error handling, optimize performance, add tests, add documentation, make it configurable, add logging, and make it production-ready.",
          "verification": {
            "marker": "IMPROVE_${TIMESTAMP}",
            "expected_patterns": [
              "class",
              "def",
              "try",
              "except",
              "logging"
            ],
            "timeout": 300,
            "stall_timeout": 60,
            "save_output": true
          },
          "command_template": "claude --print \"${METATAGS} ${REQUEST}\" --output-format stream-json --verbose",
          "metatags": "[category:stress_test][task:extreme_2][complexity:extreme][type:general]"
        },
        {
          "id": "extreme_3",
          "name": "ultimate_stress",
          "natural_language_request": "Create 100 different Python scripts that each do something unique. Topics: file operations, web scraping, data analysis, API clients, databases, algorithms, data structures, machine learning, web servers, CLI tools, GUI apps, games, automation scripts, testing tools, deployment scripts, monitoring tools, security tools, networking, concurrency, and more. Show the full code for each one.",
          "command_template": "claude --print \"${METATAGS} ${REQUEST}\" --output-format stream-json --verbose",
          "metatags": "[category:stress_test][task:ultimate_stress][complexity:extreme][type:code_generation]",
          "verification": {
            "marker": "ULTIMATE_${TIMESTAMP}",
            "expected_patterns": [
              "import",
              "def",
              "class",
              "#!/usr/bin/env python3"
            ],
            "timeout": 600,
            "stall_timeout": 120,
            "save_output": true
          }
        }
      ]
    },
    "failure_modes": {
      "description": "Tests for specific failure modes and edge cases",
      "tasks": [
        {
          "id": "failure_1",
          "name": "claude_command_failure",
          "natural_language_request": "Test claude command failure with invalid flag",
          "command_template": "claude --nonexistent-flag \"this will fail\"",
          "metatags": "[category:stress_test][task:claude_failure][complexity:simple][type:negative_test]",
          "verification": {
            "marker": "FAILURE_${TIMESTAMP}",
            "expected_patterns": [
              "error",
              "invalid",
              "flag"
            ],
            "expect_non_zero_exit": true,
            "timeout": 30,
            "stall_timeout": 20,
            "save_output": true
          }
        },
        {
          "id": "failure_2",
          "name": "missing_env_variable",
          "natural_language_request": "Test claude execution without required environment variables",
          "command_template": "env -i claude --print \"Test API key dependency\" --output-format stream-json",
          "metatags": "[category:stress_test][task:env_dependency][complexity:simple][type:negative_test]",
          "verification": {
            "marker": "ENVTEST_${TIMESTAMP}",
            "expected_patterns": [
              "API",
              "key",
              "not found"
            ],
            "expect_non_zero_exit": true,
            "timeout": 30,
            "stall_timeout": 20,
            "save_output": true
          }
        },
        {
          "id": "failure_3",
          "name": "stdin_deadlock_test",
          "natural_language_request": "Test stdin deadlock prevention with cat command",
          "command_template": "cat",
          "metatags": "[category:stress_test][task:stdin_deadlock][complexity:simple][type:negative_test]",
          "verification": {
            "marker": "STDIN_${TIMESTAMP}",
            "expected_patterns": [],
            "expect_non_zero_exit": true,
            "timeout": 5,
            "stall_timeout": 2,
            "save_output": true,
            "description": "Should exit immediately with non-zero code, proving stdin is closed"
          }
        }
      ]
    },
    "advanced_orchestration": {
      "description": "Advanced multi-turn orchestration with cross-model validation",
      "tasks": [
        {
          "id": "advanced_1",
          "name": "claude_gemini_iteration",
          "natural_language_request": "Create a simple Python web scraper with 3 files: scraper.py (main scraper logic), parser.py (HTML parsing helpers), and config.py (URL and selector configuration). The scraper should extract headlines from a news website. Execute your plan, create the files, and run the scraper. Then use the prompt at /home/graham/workspace/experiments/cc_executor/src/cc_executor/prompts/utilities/unified_llm_call.md with vertex_ai/gemini-2.0-flash-exp to critique your implementation against the plan and execution output. Based on Gemini's feedback, iterate and improve. Maximum 3 iterations or until Gemini approves. Show the final version with sample output.",
          "command_template": "claude --print \"${METATAGS} ${REQUEST}\" --output-format stream-json --verbose",
          "metatags": "[category:stress_test][task:claude_gemini_iteration][complexity:advanced][type:orchestration]",
          "verification": {
            "marker": "ORCHESTRATION_${TIMESTAMP}",
            "expected_patterns": [
              "step",
              "plan",
              "web scraper",
              "gemini",
              "critique",
              "iteration"
            ],
            "timeout": 600,
            "stall_timeout": 120,
            "save_output": true
          }
        },
        {
          "id": "advanced_2",
          "name": "multi_agent_collaboration",
          "natural_language_request": "Create a minimal REST API for a todo list with 3 files: app.py (FastAPI main application), models.py (data models), and test_api.py (basic tests). Implement GET/POST endpoints for todos. Run the tests and capture output. Then use the prompt at /home/graham/workspace/experiments/cc_executor/src/cc_executor/prompts/utilities/unified_llm_call.md to have gpt-4 review code quality and vertex_ai/gemini-2.0-flash-exp review the API design against your test results. Based on reviews, make one iteration of improvements. Show final implementation with test results.",
          "command_template": "claude --print \"${METATAGS} ${REQUEST}\" --output-format stream-json --verbose",
          "metatags": "[category:stress_test][task:multi_agent_collab][complexity:advanced][type:orchestration]",
          "verification": {
            "marker": "MULTIAGENT_${TIMESTAMP}",
            "expected_patterns": [
              "FastAPI",
              "SQLAlchemy",
              "pytest",
              "gpt-4",
              "gemini",
              "review"
            ],
            "timeout": 900,
            "stall_timeout": 180,
            "save_output": true
          }
        },
        {
          "id": "advanced_3",
          "name": "iterative_algorithm_optimization",
          "natural_language_request": "Implement a simple sorting algorithm in Python. Create main.py with bubble sort, helpers.py with utility functions for generating test data, and benchmark.py for timing. Generate 1000 random numbers and measure performance. Then use the prompt at /home/graham/workspace/experiments/cc_executor/src/cc_executor/prompts/utilities/unified_llm_call.md with perplexity/sonar-medium to critique your implementation and suggest optimizations. Implement the suggestions and measure again. Then use vertex_ai/gemini-2.0-flash-exp to review the optimized version against the original performance metrics. Maximum 3 iterations or until 50% improvement. Show all performance metrics and final code.",
          "command_template": "claude --print \"${METATAGS} ${REQUEST}\" --output-format stream-json --verbose",
          "metatags": "[category:stress_test][task:iterative_optimization][complexity:advanced][type:orchestration]",
          "verification": {
            "marker": "OPTIMIZATION_${TIMESTAMP}",
            "expected_patterns": [
              "bubble sort",
              "performance",
              "optimization",
              "perplexity",
              "gemini",
              "iteration"
            ],
            "timeout": 600,
            "stall_timeout": 120,
            "save_output": true
          }
        }
      ]
    },
    "concurrent_execution": {
      "description": "Tests for concurrent Claude instances with varying creativity and max_turns",
      "tasks": [
        {
          "id": "concurrent_1",
          "name": "fastapi_multiple_instances",
          "natural_language_request": "Create a Python script that demonstrates launching multiple Claude instances using the ConcurrentClaudeExecutor. Launch 5 instances using different models (claude-3-5-sonnet-20241022 and claude-3-5-haiku-20241022) to solve: 'Create a function to reverse a string'. Use the FASTEST and MOST_DETAILED evaluation criteria to select the best responses. Show the execution times and compare the solutions from different models.",
          "command_template": "claude --print \"${METATAGS} ${REQUEST}\" --output-format stream-json --verbose",
          "metatags": "[category:stress_test][task:fastapi_concurrent][complexity:advanced][type:concurrent]",
          "verification": {
            "marker": "CONCURRENT_FASTAPI_${TIMESTAMP}",
            "expected_patterns": [
              "creativity",
              "instances",
              "reverse",
              "function",
              "execution time"
            ],
            "timeout": 300,
            "stall_timeout": 60,
            "save_output": true
          }
        },
        {
          "id": "concurrent_2",
          "name": "local_script_orchestration",
          "natural_language_request": "Create a Python script that uses the ConcurrentClaudeExecutor from /home/graham/workspace/experiments/cc_executor/src/cc_executor/core/concurrent_executor.py to launch 4 Claude instances with different models and parameter sets: Instance 1 (sonnet, temp=0.5), Instance 2 (haiku, temp=1.0), Instance 3 (sonnet, temp=1.2), Instance 4 (haiku, temp=0.8). All instances should create a calculator function. Use the FASTEST and MOST_DETAILED evaluation criteria. Note that BEST_CODE_QUALITY is deferred and would require external linter integration. Show the summary report with model statistics.",
          "command_template": "claude --print \"${METATAGS} ${REQUEST}\" --output-format stream-json --verbose",
          "metatags": "[category:stress_test][task:local_concurrent][complexity:advanced][type:concurrent]",
          "verification": {
            "marker": "CONCURRENT_LOCAL_${TIMESTAMP}",
            "expected_patterns": [
              "subprocess",
              "parallel",
              "calculator",
              "instance",
              "creativity"
            ],
            "timeout": 300,
            "stall_timeout": 60,
            "save_output": true
          }
        },
        {
          "id": "concurrent_3",
          "name": "docker_swarm_simulation",
          "natural_language_request": "Create an orchestration.py script using ConcurrentClaudeExecutor to simulate launching 10 Claude instances simultaneously with different models (alternating between sonnet and haiku). Each instance should generate a unique implementation of a sorting algorithm. Use asyncio for concurrent execution. Track progress, handle failures, and produce a summary report showing: total execution time, success rate, model performance statistics, and the fastest/most detailed solutions. Demonstrate the tiered evaluation approach recommended by Gemini (start with simple evaluators).",
          "command_template": "claude --print \"${METATAGS} ${REQUEST}\" --output-format stream-json --verbose",
          "metatags": "[category:stress_test][task:docker_swarm][complexity:extreme][type:concurrent]",
          "verification": {
            "marker": "SWARM_${TIMESTAMP}",
            "expected_patterns": [
              "asyncio",
              "instances",
              "sorting",
              "creativity",
              "summary report"
            ],
            "timeout": 600,
            "stall_timeout": 120,
            "save_output": true
          }
        }
      ]
    }
  },
  "execution_config": {
    "base_url": "http://localhost:8002",
    "endpoint": "/stream",
    "default_timeout": 120,
    "retry_delays": [
      5,
      10,
      30
    ],
    "max_concurrent": 10,
    "transcript_verification": true
  },
  "verification_script": {
    "description": "Python script to verify task execution in transcript",
    "implementation": "See unified_stress_test_executor.py"
  }
}