# Claude Code Instance Stress Tests
# Converted from unified_stress_test_tasks.json
# Each test sends a natural language request to Claude via the /stream endpoint

version: 1
base_url: http://localhost:8002
defaults:
  timeout: 120
  endpoint: /stream
  expect_exit: 0

tests:
  # Simple Category - Basic functionality tests
  - id: daily_standup
    description: Help write daily standup update with interactive questions
    category: simple
    timeout: 30
    cmd: |
      curl -X POST ${BASE_URL:-http://localhost:8002}/stream \
        -H "Content-Type: application/json" \
        -d '{
          "question": "Help me write my daily standup update. Ask me what I worked on yesterday, what I'\''m working on today, and if I have any blockers. Then format it nicely for Slack.",
          "stream": true,
          "format": "json"
        }'
    expect_regex: "yesterday.*today.*blocker"

  - id: recipe_finder
    description: Find dinner recipe with specific ingredients
    category: simple
    timeout: 30
    cmd: |
      curl -X POST ${BASE_URL:-http://localhost:8002}/stream \
        -H "Content-Type: application/json" \
        -d '{
          "question": "Find me a recipe for dinner using chicken and rice. I also have tomatoes, onions, and garlic. Make it something I can cook in 30 minutes.",
          "stream": true,
          "format": "json"
        }'
    expect_regex: "chicken.*rice.*30 minutes"

  - id: quick_math
    description: Calculate 10 math problems quickly
    category: simple
    timeout: 20
    cmd: |
      curl -X POST ${BASE_URL:-http://localhost:8002}/stream \
        -H "Content-Type: application/json" \
        -d '{
          "question": "Calculate these 10 math problems quickly: 15+27, 83-46, 12*9, 144/12, 2^8, sqrt(169), 15% of 200, 3! (factorial), fibonacci(10), prime factors of 60",
          "stream": true,
          "format": "json"
        }'
    expect_regex: "42.*37.*108.*256"

  # Parallel Category - Parallel execution stress tests
  - id: ten_functions
    description: Generate 10 Python functions simultaneously
    category: parallel
    timeout: 45
    cmd: |
      curl -X POST ${BASE_URL:-http://localhost:8002}/stream \
        -H "Content-Type: application/json" \
        -d '{
          "question": "Generate 10 different Python functions simultaneously: 1) Calculate area of circle, 2) Convert celsius to fahrenheit, 3) Check if number is prime, 4) Reverse a string, 5) Find factorial, 6) Sort a list, 7) Count vowels in string, 8) Generate fibonacci sequence, 9) Check palindrome, 10) Find GCD of two numbers. Show me all the code.",
          "stream": true,
          "format": "json"
        }'
    expect_regex: "def .*return.*circle.*fibonacci"

  - id: twenty_haikus
    description: Write 20 haikus about programming concepts
    category: parallel
    timeout: 60
    cmd: |
      curl -X POST ${BASE_URL:-http://localhost:8002}/stream \
        -H "Content-Type: application/json" \
        -d '{
          "question": "Write 20 different haikus about programming. Each one should be about a different programming concept: variables, loops, functions, classes, debugging, git, APIs, databases, algorithms, data structures, testing, deployment, documentation, code review, pair programming, refactoring, design patterns, security, performance, and open source.",
          "stream": true,
          "format": "json"
        }'
    expect_regex: "variable.*loop.*function"

  # Model Comparison Category - Compare different models via LiteLLM
  - id: gpt_vs_claude
    description: Compare GPT-4 and Claude explanations of recursion
    category: model_comparison
    timeout: 60
    cmd: |
      curl -X POST ${BASE_URL:-http://localhost:8002}/stream \
        -H "Content-Type: application/json" \
        -d '{
          "question": "Ask both GPT-4 and Claude this question: '\''Explain recursion in simple terms with an example'\''. Then compare their explanations side by side.",
          "stream": true,
          "format": "json",
          "model": "gpt-4"
        }'
    expect_regex: "recursion.*example.*function calls itself"

  - id: all_models_fibonacci
    description: Calculate 20th Fibonacci using multiple models
    category: model_comparison
    timeout: 90
    cmd: |
      curl -X POST ${BASE_URL:-http://localhost:8002}/stream \
        -H "Content-Type: application/json" \
        -d '{
          "question": "Calculate the 20th Fibonacci number using these models: GPT-3.5, GPT-4, Claude, Gemini-Pro, and Llama-2. Show all their answers and note any differences.",
          "stream": true,
          "format": "json"
        }'
    expect_regex: "6765.*fibonacci.*20th"

  # Long Running Category - Long running and streaming tests
  - id: epic_story
    description: Write 5000 word science fiction story
    category: long_running
    timeout: 180
    cmd: |
      curl -X POST ${BASE_URL:-http://localhost:8002}/stream \
        -H "Content-Type: application/json" \
        -d '{
          "question": "Write a 5000 word science fiction story about a programmer who discovers their code is sentient. Include dialogue, plot twists, and a surprising ending. Stream the entire story.",
          "stream": true,
          "format": "json"
        }'
    expect_regex: "programmer.*sentient.*code"

  - id: comprehensive_guide
    description: Create 10000 word Python production guide
    category: long_running
    timeout: 300
    cmd: |
      curl -X POST ${BASE_URL:-http://localhost:8002}/stream \
        -H "Content-Type: application/json" \
        -d '{
          "question": "Create a comprehensive 10,000 word guide on '\''Building Production-Ready Python Applications'\''. Cover architecture, testing, deployment, monitoring, security, performance optimization, and best practices. Include code examples throughout.",
          "stream": true,
          "format": "json"
        }'
    expect_regex: "Python.*testing.*deployment.*def "

  # Rapid Fire Category - Rapid sequential requests
  - id: hundred_questions
    description: Answer 100 yes/no questions rapidly
    category: rapid_fire
    timeout: 120
    cmd: |
      curl -X POST ${BASE_URL:-http://localhost:8002}/stream \
        -H "Content-Type: application/json" \
        -d '{
          "question": "Answer these 100 quick yes/no questions as fast as possible: Is Python interpreted? Is Java compiled? Is 2+2=4? Is the sky blue? Is water wet? Is HTML a programming language? Is CSS for styling? Is 10 > 5? Is 0 false in Python? Is null same as undefined? Is git distributed? Is Linux open source? Is Windows free? Is Apple a fruit? Is Google a search engine? Is Facebook social media? Is Twitter now X? Is AI intelligent? Is ML subset of AI? Is deep learning ML? Is neural network inspired by brain? Is GPU faster than CPU for ML? Is RAM volatile? Is SSD faster than HDD? Is USB universal? Is HDMI for video? Is WiFi wireless? Is Bluetooth short range? Is 5G faster than 4G? Is IPv6 newer than IPv4? Is HTTPS secure? Is HTTP port 80? Is HTTPS port 443? Is DNS for domains? Is IP address unique? Is MAC address hardware? Is localhost 127.0.0.1? Is ping a network tool? Is firewall for security? Is antivirus software? Is malware bad? Is phishing social engineering? Is encryption reversible? Is hashing one-way? Is Base64 encoding? Is JSON text format? Is XML markup? Is CSV comma separated? Is SQL for databases? Is NoSQL non-relational? Is MongoDB document store? Is Redis in-memory? Is PostgreSQL relational? Is MySQL open source? Is Docker containerization? Is Kubernetes orchestration? Is VM virtual machine? Is cloud computing remote? Is AWS Amazon? Is Azure Microsoft? Is GCP Google? Is serverless no servers? Is microservices architecture? Is monolith single unit? Is API interface? Is REST architectural style? Is GraphQL query language? Is WebSocket bidirectional? Is HTTP stateless? Is cookie client-side? Is session server-side? Is JWT token? Is OAuth authorization? Is CORS cross-origin? Is XSS attack? Is SQL injection attack? Is DDOS distributed attack? Is VPN private network? Is TOR anonymous? Is Bitcoin cryptocurrency? Is blockchain distributed ledger? Is Ethereum smart contracts? Is NFT non-fungible? Is Web3 decentralized? Is metaverse virtual world? Is AR augmented reality? Is VR virtual reality? Is AI artificial intelligence? Is AGI general intelligence? Is singularity hypothetical? Is quantum computing real? Is Moore'\''s law slowing? Is transistor semiconductor? Is binary base 2? Is hexadecimal base 16? Is bit smallest unit? Is byte 8 bits? Is kilobyte 1024 bytes? Is megabyte 1024 KB? Is gigabyte 1024 MB? Is terabyte 1024 GB?",
          "stream": true,
          "format": "json"
        }'
    expect_regex: "Yes.*No.*Python.*Java"

  # Complex Orchestration Category - Multi-step orchestration
  - id: full_stack_app
    description: Guide through building complete todo app
    category: complex_orchestration
    timeout: 300
    cmd: |
      curl -X POST ${BASE_URL:-http://localhost:8002}/stream \
        -H "Content-Type: application/json" \
        -d '{
          "question": "Guide me through building a complete todo app with these steps: 1) Design the database schema, 2) Create a REST API with FastAPI, 3) Build a React frontend, 4) Write unit tests for the API, 5) Create a Dockerfile, 6) Write deployment instructions for AWS. Show all code and explanations for each step.",
          "stream": true,
          "format": "json"
        }'
    expect_regex: "CREATE TABLE.*FastAPI.*React.*Dockerfile"

  - id: code_review_chain
    description: Analyze, refactor, test, document, and optimize code
    category: complex_orchestration
    timeout: 120
    cmd: |
      curl -X POST ${BASE_URL:-http://localhost:8002}/stream \
        -H "Content-Type: application/json" \
        -d '{
          "question": "Here'\''s a Python function. First analyze it for issues, then refactor it, then write tests for it, then create documentation, and finally optimize its performance. The function is: def process_data(data): result = []; for i in range(len(data)): if data[i] > 0: result.append(data[i] * 2); return result",
          "stream": true,
          "format": "json"
        }'
    expect_regex: "def test_.*docstring.*list comprehension"

  # Extreme Stress Category - Tests to find breaking points
  - id: research_explosion
    description: Research 20 topics simultaneously with comparison table
    category: extreme_stress
    timeout: 300
    cmd: |
      curl -X POST ${BASE_URL:-http://localhost:8002}/stream \
        -H "Content-Type: application/json" \
        -d '{
          "question": "Research these 20 topics simultaneously and create a comparison table: Rust vs Go performance, Python vs JavaScript for ML, React vs Vue vs Angular, AWS vs Azure vs GCP pricing, MongoDB vs PostgreSQL, GraphQL vs REST, Kubernetes vs Docker Swarm, TensorFlow vs PyTorch, Vim vs Emacs, Linux vs Windows for servers, Git vs SVN, Agile vs Waterfall, microservices vs monolith, SQL vs NoSQL, functional vs OOP, static vs dynamic typing, compiled vs interpreted, sync vs async, REST vs gRPC, and tabs vs spaces. Include pros, cons, and use cases for each.",
          "stream": true,
          "format": "json"
        }'
    expect_regex: "Rust.*Python.*comparison.*pros.*cons"

  - id: infinite_improvement
    description: Improve code 10 times iteratively
    category: extreme_stress
    timeout: 300
    cmd: |
      curl -X POST ${BASE_URL:-http://localhost:8002}/stream \
        -H "Content-Type: application/json" \
        -d '{
          "question": "Take this code and improve it 10 times. Each improvement should build on the previous one. Start with: print('\''hello world'\''). For each iteration, make it more sophisticated, add features, improve structure, add error handling, optimize performance, add tests, add documentation, make it configurable, add logging, and make it production-ready.",
          "stream": true,
          "format": "json"
        }'
    expect_regex: "class.*def.*try.*except.*logging"

  - id: ultimate_stress
    description: Create 100 unique Python scripts
    category: extreme_stress
    timeout: 600
    cmd: |
      curl -X POST ${BASE_URL:-http://localhost:8002}/stream \
        -H "Content-Type: application/json" \
        -d '{
          "question": "Create 100 different Python scripts that each do something unique. Topics: file operations, web scraping, data analysis, API clients, databases, algorithms, data structures, machine learning, web servers, CLI tools, GUI apps, games, automation scripts, testing tools, deployment scripts, monitoring tools, security tools, networking, concurrency, and more. Show the full code for each one.",
          "stream": true,
          "format": "json"
        }'
    expect_regex: "import.*def.*class.*#!/usr/bin/env python3"

# Category groupings for batch execution
categories:
  simple:
    - daily_standup
    - recipe_finder
    - quick_math
  parallel:
    - ten_functions
    - twenty_haikus
  model_comparison:
    - gpt_vs_claude
    - all_models_fibonacci
  long_running:
    - epic_story
    - comprehensive_guide
  rapid_fire:
    - hundred_questions
  complex_orchestration:
    - full_stack_app
    - code_review_chain
  extreme_stress:
    - research_explosion
    - infinite_improvement
    - ultimate_stress