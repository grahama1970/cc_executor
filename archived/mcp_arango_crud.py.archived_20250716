#!/usr/bin/env python3
"""
MCP Server for ArangoDB CRUD operations.

This MCP tool provides simple database access for agents to:
- Query ArangoDB with natural language or AQL
- Find similar resolved scripts and their fixes
- Log events and errors
- Search using BM25 text similarity

Usage from agent:
    result = await mcp__arango_crud__query({
        "query": "What are the closest resolved scripts to the one I'm debugging?",
        "context": {"script_name": "my_script.py", "error_type": "ImportError"}
    })
"""

import asyncio
import json
import os
import sys
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Any, Union

# Add parent directory to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent))

from mcp.server import Server
from mcp.server.stdio import stdio_server
from mcp.types import Tool, TextContent

from loguru import logger
from dotenv import load_dotenv
from arango import ArangoClient
from arango.exceptions import ArangoError

# Load environment variables
load_dotenv()

# Initialize MCP server
server = Server("mcp-arango-crud")


class ArangoMCP:
    """MCP interface for ArangoDB operations."""
    
    def __init__(self):
        """Initialize connection."""
        self.client = None
        self.db = None
        self._connect()
    
    def _connect(self):
        """Connect to ArangoDB."""
        try:
            self.client = ArangoClient(hosts=os.getenv("ARANGO_URL", "http://localhost:8529"))
            self.db = self.client.db(
                os.getenv("ARANGO_DATABASE", "script_logs"),
                username=os.getenv("ARANGO_USERNAME", "root"),
                password=os.getenv("ARANGO_PASSWORD", "openSesame")
            )
            logger.info("Connected to ArangoDB")
        except Exception as e:
            logger.error(f"Failed to connect to ArangoDB: {e}")
            raise
    
    def find_similar_resolved_scripts(self, script_name: str, error_type: Optional[str] = None, limit: int = 3) -> Dict[str, Any]:
        """
        Find similar resolved scripts using BM25 search.
        
        This is the main function for finding scripts that had similar issues and were resolved.
        """
        try:
            # Build search query based on context
            search_terms = [script_name]
            if error_type:
                search_terms.append(error_type)
            search_query = " ".join(search_terms)
            
            # Use BM25 search on the search view
            aql = """
            FOR doc IN agent_activity_search
            SEARCH ANALYZER(doc.message IN TOKENS(@query, 'text_en'), 'text_en')
                OR ANALYZER(doc.script_name IN TOKENS(@script, 'text_en'), 'text_en')
            LET score = BM25(doc)
            FILTER score > 0.3
            FILTER doc.resolved == true OR doc.fix_description != null
            SORT score DESC
            LIMIT @limit
            RETURN {
                id: doc._id,
                script_name: doc.script_name,
                error_type: doc.error_type,
                message: doc.message,
                fix_description: doc.fix_description,
                fix_rationale: doc.fix_rationale,
                stdout: doc.stdout,
                stderr: doc.stderr,
                code_snippet: doc.code_snippet,
                resolved_at: doc.resolved_at,
                resolution_time_minutes: doc.resolution_time_minutes,
                similarity_score: score,
                tags: doc.tags,
                execution_id: doc.execution_id
            }
            """
            
            cursor = self.db.aql.execute(aql, bind_vars={
                "query": search_query,
                "script": script_name,
                "limit": limit
            })
            
            results = list(cursor)
            
            # If no results from search view, try direct query
            if not results:
                logger.info("No results from BM25 search, trying direct query")
                
                fallback_aql = """
                FOR doc IN log_events
                FILTER doc.resolved == true OR doc.fix_description != null
                FILTER CONTAINS(LOWER(doc.script_name), LOWER(@script))
                    OR (doc.error_type != null AND doc.error_type == @error_type)
                SORT doc.resolved_at DESC
                LIMIT @limit
                RETURN {
                    id: doc._id,
                    script_name: doc.script_name,
                    error_type: doc.error_type,
                    message: doc.message,
                    fix_description: doc.fix_description,
                    fix_rationale: doc.fix_rationale,
                    stdout: doc.extra_data.stdout,
                    stderr: doc.extra_data.stderr,
                    code_snippet: doc.extra_data.code_snippet,
                    resolved_at: doc.resolved_at,
                    resolution_time_minutes: doc.extra_data.resolution_time_minutes,
                    tags: doc.tags,
                    execution_id: doc.execution_id
                }
                """
                
                cursor = self.db.aql.execute(fallback_aql, bind_vars={
                    "script": script_name,
                    "error_type": error_type,
                    "limit": limit
                })
                
                results = list(cursor)
            
            return {
                "success": True,
                "query": f"Similar resolved scripts to '{script_name}'" + (f" with {error_type}" if error_type else ""),
                "count": len(results),
                "results": results
            }
            
        except Exception as e:
            logger.error(f"Search failed: {e}")
            return {
                "success": False,
                "error": str(e),
                "suggestion": "Check if agent_activity_search view exists or use direct collection query"
            }
    
    def query(self, aql: str, bind_vars: Optional[Dict] = None) -> Dict[str, Any]:
        """Execute raw AQL query."""
        try:
            cursor = self.db.aql.execute(aql, bind_vars=bind_vars or {})
            results = list(cursor)
            return {
                "success": True,
                "count": len(results),
                "results": results
            }
        except ArangoError as e:
            return {
                "success": False,
                "error": str(e),
                "aql": aql,
                "bind_vars": bind_vars
            }
    
    def natural_language_query(self, question: str, context: Optional[Dict] = None) -> Dict[str, Any]:
        """
        Process natural language queries about debugging and scripts.
        """
        question_lower = question.lower()
        
        # Check for specific patterns
        if "similar" in question_lower and "resolved" in question_lower:
            # Extract context
            script_name = context.get("script_name", "current_script") if context else "current_script"
            error_type = context.get("error_type") if context else None
            limit = 3  # Default to top 3
            
            # Extract limit from question if specified
            for word in question.split():
                if word.isdigit():
                    limit = int(word)
                    break
            
            return self.find_similar_resolved_scripts(script_name, error_type, limit)
        
        # Default: return guidance
        return {
            "success": True,
            "message": "Query pattern not recognized",
            "suggestions": [
                "Try: 'find similar resolved scripts'",
                "Or use raw AQL with the 'aql' parameter"
            ],
            "example_queries": {
                "similar_scripts": "What are the closest resolved scripts to the one I'm debugging?",
                "recent_errors": "Show me recent errors",
                "count_by_type": "Count errors by type"
            }
        }


# Create global instance
db = ArangoMCP()


@server.list_tools()
async def list_tools() -> List[Tool]:
    """List available MCP tools."""
    return [
        Tool(
            name="query",
            description="""Query ArangoDB using natural language or AQL.
            
            For natural language, use questions like:
            - "What are the closest resolved scripts to the one I'm debugging?"
            - "Show me similar resolved scripts with ImportError"
            - "Find scripts that were fixed quickly"
            
            For AQL, provide raw query and optional bind_vars.
            
            The tool is especially good at finding similar resolved scripts using BM25 search.""",
            inputSchema={
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "Natural language question or AQL query"
                    },
                    "aql": {
                        "type": "string", 
                        "description": "Raw AQL query (alternative to natural language)"
                    },
                    "bind_vars": {
                        "type": "object",
                        "description": "Bind variables for AQL query"
                    },
                    "context": {
                        "type": "object",
                        "description": "Context for natural language queries",
                        "properties": {
                            "script_name": {"type": "string"},
                            "error_type": {"type": "string"},
                            "error_message": {"type": "string"}
                        }
                    }
                },
                "oneOf": [
                    {"required": ["query"]},
                    {"required": ["aql"]}
                ]
            }
        ),
        Tool(
            name="log",
            description="Log an event to ArangoDB",
            inputSchema={
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "Log message"
                    },
                    "level": {
                        "type": "string",
                        "description": "Log level (INFO, ERROR, etc.)",
                        "default": "INFO"
                    },
                    "extra": {
                        "type": "object",
                        "description": "Additional fields to log"
                    }
                },
                "required": ["message"]
            }
        )
    ]


@server.call_tool()
async def call_tool(name: str, arguments: Dict[str, Any]) -> List[TextContent]:
    """Execute MCP tool calls."""
    
    if name == "query":
        # Handle natural language query
        if "query" in arguments:
            result = db.natural_language_query(
                arguments["query"],
                arguments.get("context")
            )
        # Handle raw AQL
        elif "aql" in arguments:
            result = db.query(
                arguments["aql"],
                arguments.get("bind_vars")
            )
        else:
            result = {
                "success": False,
                "error": "Must provide either 'query' or 'aql' parameter"
            }
        
        return [TextContent(
            type="text",
            text=json.dumps(result, indent=2, default=str)
        )]
    
    elif name == "log":
        # Log to database
        doc = {
            "timestamp": datetime.now().isoformat(),
            "level": arguments.get("level", "INFO"),
            "message": arguments["message"],
            "script_name": "mcp_arango_crud",
            **arguments.get("extra", {})
        }
        
        try:
            result = db.db.collection("log_events").insert(doc)
            return [TextContent(
                type="text",
                text=json.dumps({
                    "success": True,
                    "id": result["_id"],
                    "message": "Logged successfully"
                })
            )]
        except Exception as e:
            return [TextContent(
                type="text",
                text=json.dumps({
                    "success": False,
                    "error": str(e)
                })
            )]
    
    else:
        return [TextContent(
            type="text",
            text=json.dumps({
                "error": f"Unknown tool: {name}"
            })
        )]


async def main():
    """Run the MCP server."""
    async with stdio_server() as (read_stream, write_stream):
        await server.run(read_stream, write_stream)


if __name__ == "__main__":
    asyncio.run(main())